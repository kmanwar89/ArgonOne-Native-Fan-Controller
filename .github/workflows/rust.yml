name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure
      run: |
        sudo apt-get update
        rustup target add aarch64-unknown-linux-gnu
        sudo apt-get install gcc-aarch64-linux-gnu

    - name: Build standard (config file)
      run: cargo build --target aarch64-unknown-linux-gnu --release

    - name: Build defaults (no config file)
      run: cargo build --target aarch64-unknown-linux-gnu --release --no-default-features

    - name: List build artifacts
      run: ls -la target/aarch64-unknown-linux-gnu/release/

    - name: Copy binary
      run: cp target/aarch64-unknown-linux-gnu/release/argon_fan_controller ./

    - name: Extract Tag Name
      id: extract_tag
      run: echo "::set-output name=tag::${GITHUB_REF##*/}"

    - name: Check if Release Exists
      id: check_release
      run: |
        response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.extract_tag.outputs.tag }})
        http_status=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        if [ "$http_status" == "200" ]; then
          release_id=$(echo $response | sed -e 's/HTTPSTATUS:.*//g' | jq .id)
          echo "::set-output name=release_id::$release_id"
        else
          echo "::set-output name=release_id::"
        fi

    - name: Delete Existing Release
      if: steps.check_release.outputs.release_id
      run: |
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_tag.outputs.tag }}
        release_name: Release ${{ steps.extract_tag.outputs.tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: |
          ./argon_fan_controller
          ./argon_fan_controller.service
          ./argon_fan_controller_cfg.yml
          ./deploy.sh
          ./remove.sh
          ./get_temps.sh
        asset_name: argon_fan_controller.zip
        asset_content_type: application/zip
